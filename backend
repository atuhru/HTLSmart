// backend/server.js
const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

// Conexão com MongoDB
mongoose.connect('mongodb://localhost/hotel_system', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Models
const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  role: { type: String, enum: ['admin', 'user'] },
  created_at: { type: Date, default: Date.now }
});

const roomSchema = new mongoose.Schema({
  number: { type: String, unique: true },
  type: String,
  price: Number,
  status: { type: String, enum: ['available', 'occupied', 'maintenance', 'cleaning'] }
});

const reservationSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  room: { type: mongoose.Schema.Types.ObjectId, ref: 'Room' },
  checkIn: Date,
  checkOut: Date,
  status: { type: String, enum: ['confirmed', 'cancelled', 'completed'] },
  totalPrice: Number
});

const guestSchema = new mongoose.Schema({
  name: String,
  email: String,
  phone: String,
  document: String,
  address: String
});

const User = mongoose.model('User', userSchema);
const Room = mongoose.model('Room', roomSchema);
const Reservation = mongoose.model('Reservation', reservationSchema);
const Guest = mongoose.model('Guest', guestSchema);

// Middleware de autenticação
const authMiddleware = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'Token não fornecido' });

    const decoded = jwt.verify(token, 'secret_key');
    req.user = await User.findById(decoded.id);
    next();
  } catch (error) {
    res.status(401).json({ error: 'Token inválido' });
  }
};

// Middleware de admin
const adminMiddleware = (req, res, next) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Acesso negado' });
  }
  next();
};

// Rotas de Autenticação
app.post('/api/register', async (req, res) => {
  try {
    const { name, email, password, role = 'user' } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({ name, email, password: hashedPassword, role });
    res.status(201).json(user);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ error: 'Usuário não encontrado' });

    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) return res.status(400).json({ error: 'Senha inválida' });

    const token = jwt.sign({ id: user._id }, 'secret_key', { expiresIn: '24h' });
    res.json({ token, user });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Rotas de Quartos
app.get('/api/rooms', authMiddleware, async (req, res) => {
  try {
    const rooms = await Room.find();
    res.json(rooms);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.post('/api/rooms', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const room = await Room.create(req.body);
    res.status(201).json(room);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Rotas de Reservas
app.post('/api/reservations', authMiddleware, async (req, res) => {
  try {
    const reservation = await Reservation.create({ ...req.body, user: req.user._id });
    res.status(201).json(reservation);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.get('/api/reservations', authMiddleware, async (req, res) => {
  try {
    const query = req.user.role === 'admin' ? {} : { user: req.user._id };
    const reservations = await Reservation.find(query)
      .populate('user')
      .populate('room');
    res.json(reservations);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Rotas de Hóspedes
app.post('/api/guests', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const guest = await Guest.create(req.body);
    res.status(201).json(guest);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.get('/api/guests', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const guests = await Guest.find();
    res.json(guests);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Rotas de Check-in/Check-out
app.post('/api/checkin/:reservationId', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const reservation = await Reservation.findById(req.params.reservationId);
    if (!reservation) return res.status(404).json({ error: 'Reserva não encontrada' });

    const room = await Room.findById(reservation.room);
    room.status = 'occupied';
    await room.save();

    reservation.status = 'confirmed';
    await reservation.save();

    res.json(reservation);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

app.post('/api/checkout/:reservationId', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const reservation = await Reservation.findById(req.params.reservationId);
    if (!reservation) return res.status(404).json({ error: 'Reserva não encontrada' });

    const room = await Room.findById(reservation.room);
    room.status = 'cleaning';
    await room.save();

    reservation.status = 'completed';
    await reservation.save();

    res.json(reservation);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));
